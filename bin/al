#!/bin/sh
#/* vim: ft=bash */

#
# TODO:
# - Bad design, now.
# - Make to be 1 command = 1 script file
#   - DBに入れたらあんまり意味ない, 普通に手で登録編集できるから意味がある
#   - 追加更新削除にコマンドは使わない, add/remove は重複などを考慮すると面倒
# - ただ、同名コマンドを現在のパスで登録できるのは欲しい
#   - Want to be keeping command-name equal script-name
# - プロジェクト判別で、現在パスを含むプロジェクトが複数ある場合に
#   最も浅い階層のプロジェクトのものを適用したいが、それがシェルだと糞面倒
#
#   .al/projects/projectname/.projectpath に "/Users/kjirou/foo/bar" だけのファイルを置いて
#   find .al/projects -name '.projectpath' | xargs grep -r カレントパス | sort | head -n 1
#   で、最も短いパスが分かったあとに
#   find .al/projects -name '.projectpath' | xargs grep -x そのパス
#   とかで、分かりそう、でも面倒
#
# - 諦めて pypi なり gem なりで妥協する
#
# al cd {project_name}
#   Move to project root
# al look {cmd}
# al {cmd} / al exec {cmd}
# al bank
#   Move to scripts root
#

SCRIPT_ROOT=$(cd $(dirname $0) && pwd)'/..'
CREATE_DB_SQL="${SCRIPT_ROOT}/sql/create_database.sql"
CURRENT_ROOT=$(pwd)
DATA_ROOT="${HOME}/.al"
PROJECT_INDEX_FILE="${DATA_ROOT}/projects.dat"
PROJECT_DATA_ROOT="${DATA_ROOT}/projects"
GLOBAL_PROJECT_NAME='__global__'
GLOBAL_PROJECT_ROOT="${PROJECT_DATA_ROOT}/${GLOBAL_PROJECT_NAME}"


# Initialization
if test ! -d $DATA_ROOT; then
  mkdir $DATA_ROOT
fi
if test ! -f $PROJECT_INDEX_FILE; then
  touch $PROJECT_INDEX_FILE
fi
if test ! -d $PROJECT_DATA_ROOT; then
  mkdir $PROJECT_DATA_ROOT
fi
if test ! -d $GLOBAL_PROJECT_ROOT; then
  mkdir $GLOBAL_PROJECT_ROOT
fi


# Extract sub-command from args
CMD='exec'
case "$1" in
  mkproject|cd|exec|remove)
    CMD="$1"
    shift
    ;;
esac


# Parse options
INVALID_ARGS='0'
ONLY_LOCAL='0'
while getopts 'l' flag; do
  case $flag in
    \?)
      INVALID_ARGS='1'
      break
      ;;
    l)
      ONLY_LOCAL='1'
      ;;
  esac
done

shift $(expr $OPTIND - 1)

if test "$INVALID_ARGS" = '1'; then
  echo >&2 'Invalid args or options'
  exit 1
fi


# Functions
get_project_data_by_path () {
  path=$1
}

get_project_data_root () {
  project_name="$1"
  if test "$project_name" = ""; then
    project_name=$GLOBAL_PROJECT_NAME
  fi
  echo "${PROJECT_DATA_ROOT}/${project_name}"
}


# "mkproject" command
if test "$CMD" = 'mkproject'; then

  project_name="$1"
  if test "$project_name" = ''; then
    echo 'Error: Invalid args' && exit 1
  fi

  path="${CURRENT_ROOT}"
  project_root=$(get_project_data_root ${project_name})

  if test -d $project_root; then
    echo "Error: ${project_name} is already existed" && exit 1
  fi

  mkdir $project_root
  line="${project_name} ${path}"
  echo "$line" >> $PROJECT_INDEX_FILE
fi


# "cd" command
if test "$CMD" = 'cd'; then
  echo 1
fi


# "add" command
if test "$CMD" = 'add'; then
  your_cmd_name=$1
  shift
  your_cmd_body=$@

  path=''
  if test "$ONLY_LOCAL" = '1'; then
    path=$CURRENT_ROOT
  fi
fi


# "look" command
  your_cmd_name=$1


# "exec" command


#echo "CMD=$CMD"
#echo "INVALID_ARGS=$INVALID_ARGS"
#echo "ONLY_LOCAL=$ONLY_LOCAL"
#echo "OTHER=$@"
