#!/bin/sh
#/* vim: ft=bash */

#
# TODO:
# - Bad design, now.
# - Make to be 1 command = 1 script file
#   - DBに入れたらあんまり意味ない, 普通に手で登録編集できるから意味がある
#   - 追加更新削除にコマンドは使わない, add/remove は重複などを考慮すると面倒
# - ただ、同名コマンドを現在のパスで登録できるのは欲しい
#   - Want to be keeping command-name equal script-name
#
# al mkproject {project_name}
#   Register project name and project path (by pwd)
# al {cmd} / al exec {cmd}
# al cd {project_name}
#   Move to project root
# al bank
#   Move to scripts root
#

SCRIPT_ROOT=$(cd $(dirname $0) && pwd)'/..'
CREATE_DB_SQL="${SCRIPT_ROOT}/sql/create_database.sql"
CURRENT_ROOT=$(pwd)
DATA_ROOT="${HOME}/.al"
DB_FILE="${DATA_ROOT}/al.sqlite"


# Initialization
if test ! -d $DATA_ROOT; then
  mkdir $DATA_ROOT
fi


# Extract sub-command from args
CMD='exec'
case "$1" in
  add|exec|remove)
    CMD="$1"
    shift
    ;;
esac


# Parse options
INVALID_ARGS='0'
ONLY_LOCAL='0'
while getopts 'l' flag; do
  case $flag in
    \?)
      INVALID_ARGS='1'
      break
      ;;
    l)
      ONLY_LOCAL='1'
      ;;
  esac
done

shift $(expr $OPTIND - 1)

if test "$INVALID_ARGS" = '1'; then
  echo >&2 'Invalid args or options'
  exit 1
fi


# "add" command
if test "$CMD" = 'add'; then
  your_cmd_name=$1
  shift
  your_cmd_body=$@

  path=''
  if test "$ONLY_LOCAL" = '1'; then
    path=$CURRENT_ROOT
  fi
fi


# "look" command
  your_cmd_name=$1


# "exec" command


#echo "CMD=$CMD"
#echo "INVALID_ARGS=$INVALID_ARGS"
#echo "ONLY_LOCAL=$ONLY_LOCAL"
#echo "OTHER=$@"
